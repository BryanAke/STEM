/**
 * ## Grid
 *
 * Within sections (and articles) we use a standard
 * 12-column grid for overall layout, in a responsive,
 * mobile-first architecture. In general, media queries
 * should be tailored for particular content items, but the
 * primary breakpoints for the grid are at 500x and
 * 1000px.
 *
 * - default (no media query) for smartphones
 * - `@media (min-width:  500px) {}` large smartphone/phablet
 * - `@media (min-width: 1000px) {}` desktop
 */


/**
 * Container:
 * The `container` class encapsulates all grid-based
 * content.
 *
 *     @example:
 *     <div class="container">
 *         Contents here, starting with rows
 *     </div>
 */

.container {
    box-sizing: border-box;
}


/**
 * Row:
 * The `row` class encapsulates a single row
 * in the grid. Content within the row will
 * be vertically aligned, subject to wrapping.
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             Columns go here
 *         </div>
 *     </div>
 */

/*
 * We're using flexbox for the grid since the page
 * layout is challenging for other grid approaches
 * (inline-block or floats). That does leave IE9
 * (and maybe IE10) behind.
 */

.row {
    align-items: stretch;
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
}


/**
 * Column:
 * The `column` and `columns` classes identify grid
 * columns. They are combined with modifier classes
 * to indicate how many columns (out of twelve) the
 * content should cover. In addition to plain old
 * integers (`one column`), the grid supports columns
 * defined as fractions of the row (`one-third column`).
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             <div class="three columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     3/12 (1/4) of row
 *                 </div>
 *             </div>
 *             <div class="nine columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     9/12 (3/4) of row
 *                 </div>
 *             </div>
 *         </div>
 *         <div class="row" style="margin-top:0.2em">
 *             <div class="two-thirds column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     2/3 of row
 *                 </div>
 *             </div>
 *             <div class="one-third column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     1/3 of row
 *                 </div>
 *             </div>
 *         </div>
 *     </div>
 */

/*
 * Start with generic and mobile-first rules. For those screen sizes
 * all columns are full-width, and no modifiers are relevant.
 */

.column,
.columns {
    box-sizing: border-box;
    flex-basis: 100%;
    flex-grow: 1;
    flex-shrink: 1;
}

/*
 * At tablet sizes, columns can shrink to half of the row
 * width. That lets us use modifiers to define how much of
 * the screen columns can consume. It's pretty basic, though,
 * as a number of columns either consumes the entire width
 * or half of it. Note that we define the modifiers as
 * double class selectors (for ease of readability in the
 * markup, e.g. 'class="two columns"`) and also as a
 * single class (e.g. `two-columns`); the latter allows
 * the grid definitions to be used as mixins in LESS styles.
 */

@media (min-width: 500px) {

    .one.column,
    .one.columns,
    .one-column,
    .two.columns,
    .two-columns,
    .three.columns,
    .three-columns,
    .four.columns,
    .four-columns,
    .five.columns,
    .five-columns,
    .six.columns,
    .six-columns,
    .one-sixth.column,
    .one-sixth-column,
    .one-fourth.column,
    .one-fourth-column,
    .one-third.column,
    .one-third-column,
    .one-half.column,
    .one-half-column
        { flex-basis: 50%; }
}

/*
 * Desktops get the full grid, so we can
 * flesh out the column modifiers to their
 * full glory.
 */

@media (min-width: 1000px) {

    .one.column,
    .one.columns,
    .one-column
        { flex-basis: 8.33333333333%; }
    .two.columns,
    .two-columns,
    .one-sixth.column,
    .one-sixth-column
        { flex-basis: 16.6666666667%; }
    .three.columns,
    .three-columns,
    .one-fourth.column,
    .one-fourth-column
        { flex-basis: 25%; }
    .four.columns,
    .four-columns,
    .one-third.column,
    .one-third-column
        { flex-basis: 33.3333333333%; }
    .five.columns,
    .five-columns
        { flex-basis: 41.6666666667%; }
    .six.columns,
    .six-columns,
    .one-half.column,
    .one-half-column
        { flex-basis: 50%; }
    .seven.columns,
    .seven-columns
        { flex-basis: 58.3333333333%; }
    .eight.columns,
    .eight-columns,
    .two-thirds.column,
    .two-thirds-column
        { flex-basis: 66.6666666667%; }
    .nine.columns,
    .nine-columns,
    .three-fourths.column,
    .three-fourths-column
        { flex-basis: 75%; }
    .ten.columns,
    .ten-columns
        { flex-basis: 83.3333333333%; }
    .eleven.columns,
    .eleven-columns
        { flex-basis: 91.6666666667%; }
}
