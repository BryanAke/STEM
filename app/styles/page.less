/**
 * ## HTML Page Structure
 *
 * We use a straightforward semantic markup with the
 * three standard compononents of `<nav>`, `<main>`,
 * and `<footer>`.
 */


/**
 * Section:
 * Because the site is actually just a single page
 * application, there are multiple "apparent" pages
 * within the single HTML file. Each virtual page is
 * a single `<section>` within the `<main>` content.
 *
 * By default, all sections other than the first are
 * hidden by CSS. There's an exception, however, if
 * the user's browser does not support JavaScript.
 * In that case we display all the sections so the
 * user can at least scroll to see all of the static
 * content. To override the default behavior on any
 * particular section, add the class `hide` or `show`
 * as appropriate.
 *
 * > Note: We "hide" sections by positioning them
 * offscreen, not by setting their display property
 * to `none`. This keeps all sections accessible to
 * screen readers.
 *
 *     @example:
 *     <section class="show">
 *         This section is always visible.
 *     </section>
 *     <section class="hide">
 *         This section is never visible.
 *     </section>
 */

section {
    -webkit-transition: opacity 400ms linear;
       -moz-transition: opacity 400ms linear;
        -ms-transition: opacity 400ms linear;
         -o-transition: opacity 400ms linear;
            transition: opacity 400ms linear;
    width: 100%;
}

html.js section:not(:first-of-type),
html.js section.hide,
section.hide {
    left: -9999em;
    opacity: 0;
    position: absolute;
    top: -9999em;
}

html.js section.show,
section.show {
    left: auto;
    opacity: 1;
    position: static;
}


/**
 * Article:
 * A section can optionally be divided into multiple
 * `<article>` elements. The article adds vertical
 * spacing to the contents, but does not affect
 * horizontal spacing.
 *
 *     @example:
 *     <section>
 *         <article>
 *             This is the first article.
 *         </article>
 *         <article>
 *             This is the second article.
 *         </article>
 *     </section>
 */

article {
    margin: 30px 0;
    width: 100%;
}


/**
 * Dynamic Content:
 * To keep the site at least minimally usable for
 * users without JavaScript, all content that's
 * dynamically generated by JavaScript should be
 * enclosed in a container with the `dynamic`
 * class. In a no-JavaScript environment, that
 * content will be hidden (includng from screen
 * readers). Use the `dynamic` class for static
 * content that only makes sense when there is
 * dynamic content to go with it (for example,
 * static headings for dynamic content).
 *
 *     @example:
 *     <div class="no-js">
 *         <article class="dynamic">
 *             <h6>Heading for Content</h6>
 *             <!-- dynamically-generated content here -->
 *         </article>
 *     </div>
 */

.no-js .dynamic {
    display: none;
}
