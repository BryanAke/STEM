/*csslint adjoining-classes:false, box-sizing:false, font-sizes:false, qualified-headings:false, unique-headings:false, import:false */


/**
 * # Style Guide for Georgia K-12 STEM Incubator
 *
 * CSS stylesheet for Georgia K-12 STEM Incubator. Style
 * guide generated automatically by
 * [styledown](https://github.com/styledown/styledown)
 * from comments embedded in the stylesheet.
 *
 * If you're reading the CSS source code, you can view
 * the live style guide on the
 * [STEM Incubator site](http://sathomas.me/STEM/docs/styleguide/).
 * If you're reading the style guide and have no other
 * access to the source code, you can see the fully
 * commented CSS file by viewing the page source.
 *
 * In the style guide, the left side of this page
 * describes the various style elements and gives
 * guidance for their use. The right side shows an
 * example of the corresponding element. To see the
 * markup for any example, click on the ellipses
 * (`...`) below the example.
 *
 * ## Contents
 *
 * - [HTML Page Structure](#html-page-strucure)
 *     - [Section](#section)
 *     - [Article](#article)
 *     - [Dynamic Content](#dynamic-content)
 * - [Grid](#grid)
 *     - [Container](#container)
 *     - [Row](#row)
 *     - [Column](#column)
 * - [Typography](#typography)
 *     - [Base](#base)
 *     - [Headings](#content)
 *     - [Content](#content)
 *     - [Footer](#footer)
 * - [Components](#components)
 *     - [Buttons](#buttons)
 *     - [Call to Action](#call-to-action)
 *     - [Navigation Bar](#navigation-bar)
 * - [Themes](#themes)
 *     - [Teachers Theme](#teachers-theme)
 *     - [Schools Theme](#schools-theme)
 *     - [Industry Theme](#industry-theme)
 *     - [Neutral Theme](#neutral-theme)
 */


/* ===================================================== */

/**
 * ## HTML Page Structure
 *
 * We use a straightforward semantic markup with the
 * three standard compononents of `<nav>`, `<main>`,
 * and `<footer>`.
 */

/* ===================================================== */


/**
 * Section:
 * Because the site is actually just a single page
 * application, there are multiple "apparent" pages
 * within the single HTML file. Each virtual page is
 * a single `<section>` within the `<main>` content.
 *
 * By default, all sections other than the first are
 * hidden by CSS. There's an exception, however, if
 * the user's browser does not support JavaScript.
 * In that case we display all the sections so the
 * user can at least scroll to see all of the static
 * content. To override the default behavior on any
 * particular section, add the class `hide` or `show`
 * as appropriate.
 *
 * > Note: We "hide" sections by positioning them
 * offscreen, not by setting their display property
 * to `none`. This keeps all sections accessible to
 * screen readers.
 *
 *     @example:
 *     <section class="show">
 *         This section is always visible.
 *     </section>
 *     <section class="hide">
 *         This section is never visible.
 *     </section>
 */

section {
    width: 100%;
}

html.js section:not(:first-of-type),
html.js section.hide,
section.hide {
    left: -9999em;
    position: absolute;
}

html.js section.show,
section.show {
    left: auto;
    position: static;
}


/**
 * Article:
 * A section can optionally be divided into multiple
 * `<article>` elements.
 *
 *     @example:
 *     <section>
 *         <article>
 *             This is the first article.
 *         </article>
 *         <article>
 *             This is the second article.
 *         </article>
 *     </section>
 */

article {
    width: 100%;
}


/**
 * Dynamic Content:
 * To keep the site at least minimally usable for
 * users without JavaScript, all content that's
 * dynamically generated by JavaScript should be
 * enclosed in a container with the `dynamic`
 * class. In a no-JavaScript environment, that
 * content will be hidden (includng from screen
 * readers). Use the `dynamic` class for static
 * content that only makes sense when there is
 * dynamic content to go with it (for example,
 * static headings for dynamic content).
 *
 *     @example:
 *     <div class="no-js">
 *         <article class="dynamic">
 *             <h6>Heading for Content</h6>
 *             <!-- dynamically-generated content here -->
 *         </article>
 *     </div>
 */

.no-js .dynamic {
    display: none;
}


/* ===================================================== */

/**
 * ## Grid
 *
 * Within sections (and articles) we use a standard
 * 12-column grid for overall layout, in a responsive,
 * mobile-first architecture. In general, media queries
 * should be tailored for particular content items, but the
 * primary breakpoints for the grid are at 500x and
 * 1000px.
 *
 * - default (no media query) for smartphones
 * - `@media (min-width:  500px) {}` large smartphone/phablet
 * - `@media (min-width: 1000px) {}` desktop
 */

/* ===================================================== */


/**
 * Container:
 * The `container` class encapsulates all grid-based
 * content.
 *
 *     @example:
 *     <div class="container">
 *         Contents here, starting with rows
 *     </div>
 */

.container {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
}


/**
 * Row:
 * The `row` class encapsulates a single row
 * in the grid. Content within the row will
 * be vertically aligned, subject to wrapping.
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             Columns go here
 *         </div>
 *     </div>
 */

/*
 * We're using flexbox for the grid since the page
 * layout is challenging for other grid approaches
 * (inline-block or floats). That does leave IE9
 * (and maybe IE10) behind.
 */

.row {
    align-items: stretch;
    display: -webkit-flex;
    display:     -ms-flexbox;
    display:         flex;
    -webkit-box-orient: horizontal;
       -moz-box-orient: horizontal;
        -ms-box-orient: horizontal;
    -webkit-box-direction: normal;
       -moz-box-direction: normal;
        -ms-box-direction: normal;
    -webkit-flex-direction: row;
        -ms-flex-direction: row;
            flex-direction: row;
    -webkit-flex-wrap: wrap;
        -ms-flex-wrap: wrap;
            flex-wrap: wrap;
}


/**
 * Column:
 * The `column` and `columns` classes identify grid
 * columns. They are combined with modifier classes
 * to indicate how many columns (out of twelve) the
 * content should cover. In addition to plain old
 * integers (`one column`), the grid supports columns
 * defined as fractions of the row (`one-third column`).
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             <div class="three columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     3/12 (1/4) of row
 *                 </div>
 *             </div>
 *             <div class="nine columns">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     9/12 (3/4) of row
 *                 </div>
 *             </div>
 *         </div>
 *         <div class="row" style="margin-top:0.2em">
 *             <div class="two-thirds column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     2/3 of row
 *                 </div>
 *             </div>
 *             <div class="one-third column">
 *                 <div style="background-color:lightgray;margin:5px;">
 *                     1/3 of row
 *                 </div>
 *             </div>
 *         </div>
 *     </div>
 */

/*
 * Start with generic and mobile-first rules. For those screen sizes
 * all columns are full-width.
 */

.column,
.columns {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    -webkit-flex-grow: 1;
        -ms-flex-grow: 1;
            flex-grow: 1;
    -webkit-flex-shrink: 1;
        -ms-flex-shrink: 1;
            flex-shrink: 1;
    -webkit-flex-basis: 100%;
        -ms-flex-preferred-size: 100%;
            flex-basis: 100%;
}

/*
 * At tablet sizes, columns can shrink to half of the screen
 * width.
 */

@media (min-width: 500px) {

    /* simple column definitions */
    .one.column,
    .one.columns,
    .two.columns,
    .three.columns,
    .four.columns,
    .five.columns,
    .six.columns          { -webkit-flex-basis: 50%; -ms-flex-preferred-size: 50%; flex-basis: 50%; }
    .seven.columns,
    .eight.columns,
    .nine.columns,
    .ten.columns,
    .eleven.columns,
    .twelve.columns       { -webkit-flex-basis: 100%; -ms-flex-preferred-size: 100%; flex-basis: 100%; }

    /* fractional column definitions */
    .one-third.column,
    .one-fourth.column,
    .one-sixth.column,
    .one-half.column      { -webkit-flex-basis: 50%; -ms-flex-preferred-size: 50%; flex-basis: 50%; }
    .two-thirds.column,
    .three-fourths.column,
    .one-full.column      { -webkit-flex-basis: 100%; -ms-flex-preferred-size: 100%; flex-basis: 100%; }

}

/*
 * Desktops get the full grid
 */

@media (min-width: 1000px) {

    /* simple column definitions */
    .one.column,
    .one.columns          { -webkit-flex-basis: 8.33333333333%; -ms-flex-preferred-size: 8.33333333333%; flex-basis: 8.33333333333%; }
    .two.columns          { -webkit-flex-basis: 16.6666666667%; -ms-flex-preferred-size: 16.6666666667%; flex-basis: 16.6666666667%; }
    .three.columns        { -webkit-flex-basis: 25%; -ms-flex-preferred-size: 25%; flex-basis: 25%; }
    .four.columns         { -webkit-flex-basis: 33.3333333333%; -ms-flex-preferred-size: 33.3333333333%; flex-basis: 33.3333333333%; }
    .five.columns          { -webkit-flex-basis: 91.6666666667%; -ms-flex-preferred-size: 41.6666666667%; flex-basis: 41.6666666667%; }
    .six.columns          { -webkit-flex-basis: 50%; -ms-flex-preferred-size: 50%; flex-basis: 50%; }
    .seven.columns        { -webkit-flex-basis: 58.3333333333%; -ms-flex-preferred-size: 58.3333333333%; flex-basis: 58.3333333333%; }
    .eight.columns        { -webkit-flex-basis: 66.6666666667%; -ms-flex-preferred-size: 66.6666666667%; flex-basis: 66.6666666667%; }
    .nine.columns         { -webkit-flex-basis: 75%; -ms-flex-preferred-size: 75%; flex-basis: 75%; }
    .ten.columns          { -webkit-flex-basis: 83.3333333333%; -ms-flex-preferred-size: 83.3333333333%; flex-basis: 83.3333333333%; }
    .eleven.columns       { -webkit-flex-basis: 91.6666666667%; -ms-flex-preferred-size: 91.6666666667%; flex-basis: 91.6666666667%; }
    .twelve.columns       { -webkit-flex-basis: 100%; -ms-flex-preferred-size: 100%; flex-basis: 100%; }

    /* fractional column definitions */
    .one-full.column      { -webkit-flex-basis: 100%; -ms-flex-preferred-size: 100%; flex-basis: 100%; }
    .one-half.column      { -webkit-flex-basis: 50%; -ms-flex-preferred-size: 50%; flex-basis: 50%; }
    .one-third.column     { -webkit-flex-basis: 33.3333333333%; -ms-flex-preferred-size: 33.3333333333%; flex-basis: 33.3333333333%; }
    .two-thirds.column    { -webkit-flex-basis: 66.6666666667%; -ms-flex-preferred-size: 66.6666666667%; flex-basis: 66.6666666667%; }
    .one-fourth.column    { -webkit-flex-basis: 25%; -ms-flex-preferred-size: 25%; flex-basis: 25%; }
    .three-fourths.column { -webkit-flex-basis: 75%; -ms-flex-preferred-size: 75%; flex-basis: 75%; }
    .one-sixth.column     { -webkit-flex-basis: 16.6666666667%; -ms-flex-preferred-size: 16.6666666667%; flex-basis: 16.6666666667%; }

}


/* ===================================================== */

/**
 * ## Typography
 *
 * The site's primary font is [Raleway](https://www.theleagueofmoveabletype.com/raleway)
 * from [Google fonts](http://www.google.com/fonts/specimen/Raleway).
 * Standard sans serif fallbacks are defined as well. The style sheets
 * use relative ems (`rem`) measurements based on `10px` sizing, so,
 * for example, `1.5rem = 15px`. For browsers that don't support
 * `rem` units, we don't define any fallbacks so all content will
 * revert to the browser defaults. (We do, however, ensure that the
 * default size is `15px`.)
 */

/* ===================================================== */


/* Force base font size of 10px for document */
html {
    font-size: 62.5%;
}


/**
 * Base:
 * Standard font size is 15px (1.5rem) with a 24px
 * line height.
 *
 *     @example:
 *     <p>
 *        The quick brown fox jumped over the lazy dog.<br/>
 *        Sixty zippers were quickly picked from the woven jute bag.
 *     </p>
 */

body {
    color: #222;
    font-family: "Raleway", "HelveticaNeue", "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 150%; /* don't use rems here only; for browers without rem support */
    font-weight: 400;
    line-height: 1.6;
}

p {
    margin-top: 0;
}


/**
 * Headings:
 * Headings use a slightly lighter font weight and specific line
 * heights and letter spacings tailored for the Raleway font
 * (but not so extreme as to be illegible if a font fallback
 * is required). We start with relatively modest font sizes
 * for mobile devices and then increase the sizes a bit for
 * tablets and larger.
 *
 *     @example:
 *     <h1>This is a first level heading</h1>
 *     <h2>This is a second level heading</h2>
 *     <h3>This is a third level heading</h3>
 *     <h4>This is a fourth level heading</h4>
 *     <h5>This is a fifth level heading</h5>
 *     <h6>This is a sixth level heading</h6>
 */

/* Generic heading styles */
h1, h2, h3, h4, h5, h6 {
    font-weight: 300;
    margin-bottom: 2rem;
    margin-top: 0;
}

/* Sizes for mobile */
h1 { font-size: 4.0rem; line-height: 1.2;  letter-spacing: -.1rem;}
h2 { font-size: 3.6rem; line-height: 1.25; letter-spacing: -.1rem; }
h3 { font-size: 3.0rem; line-height: 1.3;  letter-spacing: -.1rem; }
h4 { font-size: 2.4rem; line-height: 1.35; letter-spacing: -.08rem; }
h5 { font-size: 1.8rem; line-height: 1.5;  letter-spacing: -.05rem; }
h6 { font-size: 1.5rem; line-height: 1.6;  letter-spacing: 0; }

/* Desktop */
@media (min-width: 1000px) {
    h1 { font-size: 5.0rem; }
    h2 { font-size: 4.2rem; }
    h3 { font-size: 3.6rem; }
    h4 { font-size: 3.0rem; }
    h5 { font-size: 2.4rem; }
    h6 { font-size: 1.5rem; }
}


/**
 * Content:
 * The grid does not include any margins or padding to
 * support full-width images and color blocks. In most
 * cases, adding some spacing around actual content is
 * desirable. To do that, simply add the `inset` class
 * to the content.
 *
 *     @example:
 *     <p>This is a full-width content</p>
 *     <p class="inset">This is a content with whitespace</p>
 */

/*
 * By default (on a mobile device), padding
 * is pretty minimal to allow for more content.
 */

.inset {
    padding: 10px;
}

/*
 * With tablets and larger, we can afford to
 * be more generous with the white space.
 */

@media (min-width: 500px) {
    .inset { padding: 30px; }
}


/**
 * Links:
 * By default, links are styled using the same
 * color as normal content, although the link
 * text is underlined. Themes may define their
 * own particular link styles.
 *
 *     @example:
 *     <p>
 *       This paragraph contains
 *       <a href="#">a link</a>
 *     </p>
 */

a {
    color: inherit;
}


/**
 * Footer:
 * Footer content is centered. Small
 * text is reduced a bit more than
 * the default.
 *
 *     @example:
 *     <footer>
 *       <p>This is footer text</p>
 *       <p><small>This is small footer text</small></p>
 *     </footer>
 */

footer p {
    padding: 30px;
    text-align: center;
}

footer p:last-of-type {
    margin-bottom: 0;
}

footer small {
    font-size: 60%;
}


/* ===================================================== */

/**
 * ## Components
 *
 * Higher level components on the site generally
 * strive for very semantic markup to keep the
 * HTML as clean and simple as possible. (This
 * is especially helpful since much of the site
 * is dynamic and the underlying HTML actually
 * originates in JavaScript templates.) The cost,
 * of course, is a bit of added complexity in
 * the CSS.
 */

/* ===================================================== */


/**
 * Buttons:
 * Buttons styles apply not only to `<button>`
 * elements, but also to `<a class="button">`
 * links, as well as appropriate `<input>`
 * elements. The only default styles defined
 * determine the textual content of the buttons.
 * Thematic styles such as colors and borders
 * are left to individual themes.
 *
 *     @example:
 *     <button>Button</button>
 *     <a href="#" class=button>Link button</a>
 *     <input type="submit" value="Submit input">
 *     <input type="reset" value="Reset input">
 *     <input type="button" value="Button input">
 */

.button, button,
input[type="submit"], input[type="reset"], input[type="button"] {
    background-color: transparent;
    box-sizing: border-box;
    display: inline-block;
    font-size: 11px;
    font-weight: 600;
    height: 38px;
    line-height: 38px;
    letter-spacing: .1rem;
    padding: 0 30px;
    text-align: center;
    text-decoration: none;
    text-transform: uppercase;
    white-space: nowrap;
    cursor: pointer;
}


/**
 * Call to Action:
 * The "call to action" component is a special component
 * used, for example, on the main landing page. The
 * component is vertically justified and stretched to
 * completely fill the vertical space for the row.
 * The last (parent) element within the call-to-action
 * container should include a button and a responsive
 * image container. The particular image is determined
 * by the theme applied to the container.
 *
 * To support responsive images, the image container
 * is marked up as a `<div>` of class `image`. Within
 * that `<div>` is a `<span>` of class `image-spacer`.
 * The inner `span` makes it possible to change the
 * image based on media queries. That would, for example
 * allow delivery of low-resolution images to mobile
 * devices. It's also used by the themes to deliver
 * different images based on the grid construction.
 *
 *     @example:
 *     <div class="container">
 *         <div class="row">
 *             <div class="one-sixth column theme-industry call-to-action">
 *                 <div class="inset">
 *                     <p>Text Content</p>
 *                 </div>
 *                 <div>
 *                     <a class="button" href="#industry">More</a>
 *                     <div class="image" role="image">
 *                         <span class="image-spacer"><!-- --></span>
 *                     </div>
 *                 </div>
 *             </div>
 *             <div class="ten columns">
 *             </div>
 *         </div>
 *     </div>
 */

.call-to-action {
    align-items: stretch;
    display: -webkit-flex;
    display:     -ms-flexbox;
    display:         flex;
    -webkit-box-orient: vertical;
       -moz-box-orient: vertical;
        -ms-box-orient: vertical;
    -webkit-flex-direction: column;
        -ms-flex-direction: column;
            flex-direction: column;
    -webkit-box-pack: justify;
       -moz-box-pack: justify;
        -ms-box-pack: justify;
    -webkit-justify-content: space-between;
    -ms-flex-pack: justify;
    justify-content: space-between;
}

.call-to-action a.button,
.call-to-action button {
    margin: 0 10px 20px 10px;
}

.call-to-action .image {
    background-position: 50% 50%;
    background-repeat: no-repeat;
    background-size: 100%;
    display: inline-block;
    font-size: 0;
    line-height: 0;
    vertical-align: middle;
    width: 100%;
}

.call-to-action .image-spacer {
    display: block;
    height: 0;
}

@media (min-width: 500px) {
    .call-to-action a.button { margin: 0 30px 30px 30px; }
}


/**
 * Navigation Bar:
 * The responsive navigation bar at the top of all "pages"
 * on the site. The navigation must be wrapped in a `<div>`
 * of class `header`, and it must include an `<input>` of
 * type `checkbox` and an associated empty label before
 * the unordered list of menu items. The `h1` heading is for
 * branding. Links within that heading are displayed identically
 * to standard heading text (no underline or hover). See the
 * example for details.
 *
 * Note: The CSS-only implementation is fully functional
 * without JavaScript, but it does overlay the expanded menu
 * on top of the main content rather than pushing the main
 * content down. If the latter behavior is desired, a small
 * bit of JavaScript is required. When the `#nav-toggle` input
 * is checked, add the `nav-expanded` class to the `main`
 * element; remove the class when the input is not checked.
 * The rules below synchronize the behavior of the main
 * element with the navigation bar. (The class is ignored
 * when the navigation bar is full width, so there is no
 * need to check for window resize events.) Here is sample
 * code for implementing this behavior:
 *
 *     @example:
 *     <div class="header theme-teachers dark">
 *         <h1>
 *             <span><a href="#">The Georgia<br/>STEM Incubator</a></span>
 *         </h1>
 *         <nav>
 *             <input type="checkbox" id="nav-toggle" />
 *             <label for="nav-toggle"></label>
 *             <ul>
 *                 <li class="theme-teachers">
 *                     <a href="#teachers">Teachers</a>
 *                 </li>
 *                 <li class="theme-schools">
 *                     <a href="#schools">Schools</a>
 *                 </li>
 *                 <li class="theme-industry">
 *                     <a href="#industry">Industry</a>
 *                 </li>
 *             </ul>
 *         </nav>
 *     </div>
 */

/**
 * ```
 * window.addEventListener('load', function() {
 *   document.getElementById('nav-toggle')
 *     .addEventListener('change', function() {
 *       document.getElementsByTagName('main')[0]
 *         .classList.toggle('nav-expanded');
 *     });
 * });
 * ```
 */

/*
 * The styles below differ from other styles in this stylesheet
 * in a couple of ways. Unlike regular content, the navigation
 * bar relies on `px` units for precise positioning. Also, the
 * style definitions are desktop-first rather than mobile-first to
 * help make the code more understandable.
 */

/*
 * Start with generic and desktop styles.
 */

.header {
	height: 75px;
    position: relative;
}

.header:before, .header:after {
    content: "";
    display: table;
}

.header:after {
    clear: both;
}

.header h1 {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
	color: #ffffff;
    float: left;
    font-size: 20px;
    line-height: 1.2;
    margin-bottom: 0;
    padding-left: 30px;
    padding-top: 10px;
    width: 50%;
}

.header h1 span {
    border: 1px solid white;
    display: inline-block;
    padding: 1px 5px;
}

.header h1 a {
    color: inherit;
    text-decoration: none;
}

nav {
    display: block;
    float: right;
    width: 50%;
}

input[id=nav-toggle], nav label {
    display: none;
}

nav label {
	z-index: 2;
}

nav ul {
    margin: 0;
    padding: 0;
}

nav li {
    float:left;
    list-style: none;
    text-align: center;
    width: 33.3333333333%;
}

nav, nav ul, nav li, nav li > a {
	height: 100%;
}

nav li > a {
    -webkit-box-sizing: border-box;
       -moz-box-sizing: border-box;
            box-sizing: border-box;
    color: #ffffff;
	display: block;
	font-size: 16px;
	line-height: 1;
	padding: 30px 0 0 0;
	text-decoration: none;
}

main {
    -webkit-transition: padding-top 250ms linear;
       -moz-transition: padding-top 250ms linear;
         -o-transition: padding-top 250ms linear;
            transition: padding-top 250ms linear;
}

@media (max-width: 999px) {

    .nav-expanded {
        padding-top: 168px;
        -webkit-transition: padding-top 250ms ease-in;
           -moz-transition: padding-top 250ms ease-in;
             -o-transition: padding-top 250ms ease-in;
                transition: padding-top 250ms ease-in;
    }

    .header h1 {
        overflow-x: visible;
        white-space: nowrap;
    }

    nav {
        width: auto;
    }

	nav label {
        cursor: pointer;
        display: block;
        position: relative;
        -webkit-touch-callout: none;
        -webkit-user-select: none;
           -moz-user-select: none;
            -ms-user-select: none;
                user-select: none;
    }

	nav label:after {
        color: #ffffff;
		content: 'Menu';
		display: block;
		font-size: 16px;
    	line-height: 1;
		padding: 30px 20px 29px 0;
		text-align: center;
	}

	input[id=nav-toggle]:checked + label:after {
		content: 'Close Menu';
	}

	nav ul {
        border-top: 1px solid white;
        margin: 0;
        max-height: 0;
        overflow-y: hidden;
        position: absolute;
        right: 0;
        -webkit-transition: max-height 250ms linear;
           -moz-transition: max-height 250ms linear;
             -o-transition: max-height 250ms linear;
                transition: max-height 250ms linear;
        width: 100%;
        z-index: 1;
	}

	input[id=nav-toggle]:checked ~ ul {
        max-height: 168px;
        -webkit-transition: max-height 250ms ease-in;
           -moz-transition: max-height 250ms ease-in;
             -o-transition: max-height 250ms ease-in;
                transition: max-height 250ms ease-in;
    }

	nav li {
        display: block;
        text-align: right;
        width: 100%;
    }

	nav ul, nav li, nav li > a {
		height: auto;
	}

	nav li > a {
        -webkit-box-sizing: border-box;
           -moz-box-sizing: border-box;
                box-sizing: border-box;
        display: block;
        padding: 20px;
        text-decoration: none;
        width: 100%;
	}

	nav li > a:hover, nav li > a:focus {
        text-decoration: none;
	}

}

@media (max-width: 499px) {
    .header h1 { padding-left: 10px; }
	nav label:after { padding-right: 10px; }
    nav li > a { padding-right: 10px; }

}


/* ===================================================== */

/**
 * ## Themes
 *
 * Three different complementary themes determine
 * the color schemes for the site. Those themes
 * represent teachers, schools, and industry. The
 * appropriate themes are automatically applied
 * to content within the designated section (based
 * on the section's `id` value.) They can also be
 * applied outside of the specfic section (e.g. on
 * the landing page) with a class of `theme-teachers`,
 * `theme-schools`, or `theme-industry`.
 */

/* ===================================================== */


/**
 * Teachers Theme:
 *
 *     @example:
 *     <div class="theme-teachers">
 *         This is the theme for the teachers section
 *     </div>
 *     <div class="theme-teachers dark">
 *         This is the dark theme for the teachers section
 *     </div>
 */

.theme-teachers {
    background-color: #009EAF;
    color: white;
}

.theme-teachers.dark, .theme-teachers .dark,
nav li.theme-teachers,
nav li.theme-teachers > a {
    background-color: #013E45;
    color: #009EAF;
}

nav li.theme-teachers > a:hover,
nav li.theme-teachers > a:focus {
    color: white;
}

.theme-teachers .button, .theme-teachers button,
.theme-teachers input[type="submit"], input[type="submit"],
.theme-teachers input[type="reset"], input[type="reset"],
.theme-teachers input[type="button"], input[type="button"] {
    background-color: white;
    border: none;
    color: black;
}

.theme-teachers .button:hover, .theme-teachers button:hover,
.theme-teachers input[type="submit"]:hover,
.theme-teachers input[type="reset"]:hover,
.theme-teachers input[type="button"]:hover,
.theme-teachers .button:focus, .theme-teachers button:focus,
.theme-teachers input[type="submit"]:focus,
.theme-teachers input[type="reset"]:focus,
.theme-teachers input[type="button"]:focus {
    color: #009EAF;
}

.theme-teachers.call-to-action .image { background-image: url(../images/teachers-lowres.jpg); }
.theme-teachers.call-to-action .image-spacer { padding-top: 66.5625%; }

@media (min-width: 700px) {
    .theme-teachers.call-to-action .image { background-image: url(../images/teachers-small.jpg); }
    .theme-teachers.call-to-action .image-spacer { padding-top: 33.28125%; }
}

@media (min-width: 1000px) {
    .theme-teachers.call-to-action .image { background-image: url(../images/teachers.jpg); }
    .theme-teachers.call-to-action .image-spacer { padding-top: 66.5625%; }
}


/**
 * Schools Theme:
 *
 *     @example:
 *     <div class="theme-schools">
 *         This is the theme for the schools section
 *     </div>
 *     <div class="theme-schools dark">
 *         This is the dark theme for the schools section
 *     </div>
 */

.theme-schools {
    background-color: #00AB0F;
    color: white;
}

.theme-schools.dark, .theme-schools .dark,
nav li.theme-schools,
nav li.theme-schools > a {
    background-color: #00430C;
    color: #00AB0F;
}

nav li.theme-schools > a:hover,
nav li.theme-schools > a:focus {
    color: white;
}

.theme-schools .button, .theme-schools button,
.theme-schools input[type="submit"],
.theme-schools input[type="reset"]
.theme-schools input[type="button"] {
    background-color: white;
    border: none;
    color: black;
}

.theme-schools .button:hover, .theme-schools button:hover,
.theme-schools input[type="submit"]:hover,
.theme-schools input[type="reset"]:hover,
.theme-schools input[type="button"]:hover,
.theme-schools .button:focus, .theme-schools button:focus,
.theme-schools input[type="submit"]:focus,
.theme-schools input[type="reset"]:focus,
.theme-schools input[type="button"]:focus {
    color: #00AB0F;
}

.theme-schools.call-to-action .image { background-image: url(../images/schools-small.jpg); }
.theme-schools.call-to-action .image-spacer { padding-top: 66.51884701%; }

@media (min-width: 1000px) {
    .theme-schools.call-to-action .image { background-image: url(../images/schools.jpg); }
    .theme-schools.call-to-action .image-spacer { padding-top: 266.07538803%; }
}


/**
 * Industry Theme:
 *
 *     @example:
 *     <div class="theme-industry">
 *         This is the theme for the industry section
 *     </div>
 *     <div class="theme-industry dark">
 *         This is the dark theme for the industry section
 *     </div>
 */

.theme-industry {
    background-color: #005493;
    color: white;
}

.theme-industry.dark, .theme-industry .dark,
nav li.theme-industry,
nav li.theme-industry > a {
    background-color: #00213A;
    color: #2EA1CC;
}

nav li.theme-industry > a:hover,
nav li.theme-industry > a:focus {
    color: white;
}

.theme-industry .button, .theme-industry button,
.theme-industry input[type="submit"],
.theme-industry input[type="reset"],
.theme-industry input[type="button"] {
    background-color: white;
    border: none;
    color: black;
}

.theme-industry .button:hover, .theme-industry button:hover,
.theme-industry input[type="submit"]:hover,
.theme-industry input[type="reset"]:hover,
.theme-industry input[type="button"]:hover,
.theme-industry .button:focus, .theme-industry button:focus,
.theme-industry input[type="submit"]:focus,
.theme-industry input[type="reset"]:focus,
.theme-industry input[type="button"]:focus {
    color: #005493;
}

.theme-industry.call-to-action .image { background-image: url(../images/industry-small.jpg); }
.theme-industry.call-to-action .image-spacer { padding-top: 66.5480427%; }

@media (min-width: 1000px) {
    .theme-industry.call-to-action .image { background-image: url(../images/industry.jpg); }
    .theme-industry.call-to-action .image-spacer { padding-top: 266.19217082%; }
}


/**
 * Neutral Theme:
 *
 *     @example:
 *     <div class="theme-neutral light">
 *         This is the light theme for the neutral section
 *     </div>
 *     <div class="theme-neutral">
 *         This is the theme for the neutral section
 *     </div>
 *     <div class="theme-neutral dark">
 *         This is the dark theme for the neutral section
 *     </div>
 */

.theme-neutral {
    background-color: #DBDBDA;
    color: #424242;
}

.theme-neutral.light, .theme-neutral .light {
    background-color: #EFEDEB;
}

.theme-neutral.dark, .theme-neutral .dark {
    background-color: #424242;
    color: #EFEDEB;
}
